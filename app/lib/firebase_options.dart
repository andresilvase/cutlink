// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart' show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static const String messagingSenderId = String.fromEnvironment('FIREBASE_OPTIONS_MESSAGING_SENDER_ID');
  static const String androidApiKey = String.fromEnvironment('FIREBASE_OPTIONS_ANDROID_API_KEY');
  static const String androidAppId = String.fromEnvironment('FIREBASE_OPTIONS_ANDROID_APP_ID');
  static const String webApiKey = String.fromEnvironment('FIREBASE_OPTIONS_WEB_APP_KEY');
  static const String projectId = String.fromEnvironment('FIREBASE_OPTIONS_PROJECT_ID');
  static const String webAppId = String.fromEnvironment('FIREBASE_OPTIONS_WEB_APP_ID');

  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for ios - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    storageBucket: '$projectId.firebasestorage.app',
    authDomain: '$projectId.firebaseapp.com',
    messagingSenderId: messagingSenderId,
    projectId: projectId,
    apiKey: webApiKey,
    appId: webAppId,
  );

  static const FirebaseOptions android = FirebaseOptions(
    storageBucket: '$projectId.firebasestorage.app',
    messagingSenderId: messagingSenderId,
    apiKey: androidApiKey,
    projectId: projectId,
    appId: androidAppId,
  );
}
